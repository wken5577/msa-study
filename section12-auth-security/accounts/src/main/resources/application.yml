
server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "qa"

  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true


eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


# resilience4j 설정
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 # 10개의 요청을 모니터링한 후 해당 작업을 계속할지 여부를 결정 (closed -> open으로 바꿔야할지 판별)
      permittedNumberOfCallsInHalfOpenState: 2 # half-open 상태에서 허용되는 호출 수
      failureRateThreshold: 50 # 실패율이 50% 이상이면 circuit open
      waitDurationInOpenState: 10000 # circuit open 상태에서 대기 시간 (ms)


resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      waitDuration: 100
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignore-exceptions:
        - java.lang.NullPointerException # null pointer exception 발생시 retry하지 않음
      retry-exceptions:
        - java.util.concurrent.TimeoutException # timeout exception 발생시에만 retry함 다른 예와는 자동적으로 무시된다.

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000      # Rate Limiter가 요청을 처리할 수 있는 용량을 초과했을 때, 추가 요청은 최대 1초 동안 대기. 만약 1초가 지나도 용량이 확보되지 않으면, 요청은 실패(타임아웃) 처리.
      limitRefreshPeriod: 5000   # Rate Limiter의 용량이 새로 고침되는 주기를 밀리초 단위로 정의
      limitForPeriod: 1          # limitRefreshPeriod 기간 동안 허용되는 최대 요청 수를 정의